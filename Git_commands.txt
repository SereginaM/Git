#Настройка конфигурации:
git config --system		применяет настройки конфигурации ко всем пользователям
git config --global 	применяет настройки конфигурации к конкретному пользователю
git config (git config --local)	применяет настройки конфигурации к текущему репозиторию
git config --list  	отобразить текущие настройки
git config <key>  	проверка конкретного значения в настройках

Пример настройки:
git config --global user.name "Имя пользователя"
git config --global user.email e-mail адресс
git config user.name


#Общие команды:
git init	создать репозиторий в папке с проектом
git clone ссылка на удаленный репозиторий (https) - скопировать ветку из удаленного репозитория

git log		история изменений (выход кнопка q)
git log -p	история изменений с более подробной информацией (выход кнопка q)
git log --uathor имя_автора 	покажет все изменения производимые указанным автором
git status 	статус всех файлов, текущее состояние проектов
git show 	просмотр дополнительной информации о последнем коммите
git show хэш_коммита 	дополнительная информация о конкретном коммите
git blame -  отображение метаданных автора, связанных со строками, которые были внесены в файл при коммите
git blame имя_файла | grep имя_автора - отобразит что изменял конкретный автор
git diff	показать изменения в файле с момента последнего коммита
git diff --staged	показать изменения в индексе, подготовленном для коммита
git mv 		переименовать (git mv старое_имя_файла новое_имя_файла), переместить файл (git mv имя_файла путь к папке), переместить фай и переименовать (git mv имя_файла путь к папке/новое_имя_файла)
git rm		удалить файл (git rm имя_файла)
git ignore	создание файла для игнорирования лишних документов
git restore		откатить изменения в файле на состояние последнего коммита //git restore имя_файла
git fetch - 
git commit -m "Комментарий об изменениях (кратко)" - коммит

git stash - временно убрать изменения из рабочей директории (когда что то не доделал и нужно вернуться к этому позже)
git stash pop


#Создать документ (или внести изменения) на локальном репозитории и отправить в удаленный репозиторий:
git status
git add имя_файла.фармат - добавить файл из состояния  untracked в индекс
git commit -am "Комментарий об изменениях (кратко)" - добавить файл в индекс и коммит

#Изменения на удаленном репозитории нужно загрузить на локальный
git fetch - забирает изменения удаленной ветки из репозитория по умолчанию
git pull - загрузить изменения на локальный репозиторий с удаленного

#Ветки
git branch имя_ветки - создать новую ветку
git branch - отображение всех веток в репзитории
git branch -a - отображение всех веток в репзитории
git branch -в - удалить ветку (git branch -d имя_ветки)
git checkout имя_ветки - переключиться на другую ветку
git push -u origin имя.ветки - отправить созданную ветку на удаленный репозиторий
git checkout -b имя_ветки - созать новую ветку и переключиться на нее
git checkout - вернуться в мастер ветку

#Пример работы с ветками и их слияние:
git branch имя_ветки
Работаем с файлами
git status
git commit -am "Комментарий"
git push -u origin имя.ветки
git checkout - (выходим из созданной ветки в master ветку)
git merge имя.ветки - слияние веток
git push
git status

Пример_1:
git branch имя_ветки
Работаем с файлами
На удаленный репозиторий в master ветку добавлен новый файл
git status
git commit -am "Комментарий"
git push -u origin имя.ветки
git checkout master
git merge имя.ветки
git push
Ошибка о несоответсвии локального и удаленного репозитория
git pull
git push

Пример_2:
git branch имя_ветки
Работаем с файлами
git status
На удаленном репозитории в master ветке в фаил с которым только что работали внесены изменения
git commit -am "Комментарий"
git push -u origin имя.ветки
git checkout master
git merge имя.ветки
git push
Ошибка о несоответсвии в файле
Переходим в фаил на локальном репозитории, который вызвал конфликт. 
Открывваем. Смотрим конфликтные места. Редактируем. Сохраняем изменения.
git add имя_файла
git commit -am "Комментарий"
git push

#Теги
git teg - создать легковесный тег (git teg имя_тега)
git teg -a -m "" - создать анотированный тег (git teg -a имя_тега -m "Комментарий")
Теги п умолчанию не отправляются в репозиторий.
git push --tags - отправить все теги
git push origin - отправить конкретный тег (git push origin имя_тега)

#Файлы в Git могут быть^
-под версионным контролем (tracked) и нет (untracked - файлы которые не нужно отслеживать).
Если файл был изменен, но еще не попал в коммит он имеет состояние modified.
Если проводим коммит файл переходит в состояние commited.
Далее файл может опять перейти в состояние modified.
Еще промежуточное состояние staged (подготовленное к коммиту) или индекс - 
Для перевода файла в состояние staged (индекс) используется команда git add имя_файла или имя.директории
Чтобы перевести файл из состояния staged (индекс)  в состояние commited используем команду git commit -m "Комментарий".
Далее файл в состоянии commited может быть снова изменени и переходит в состояние modified
